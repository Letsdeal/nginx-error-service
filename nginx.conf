worker_processes                    2;
worker_rlimit_nofile                262144;

events {
  worker_connections                16384;
  multi_accept                      on;
  use                               epoll;
}

http {
    # Caches information about open FDs, freqently accessed files.
    open_file_cache                 max=100 inactive=30m;
    open_file_cache_valid           20m;
    open_file_cache_min_uses        2;
    open_file_cache_errors          off;

    sendfile                        on;
    tcp_nopush                      on;
    tcp_nodelay                     on;

    server_tokens                   off;

    #Specify a charset
    charset utf-8;

    # Timeouts globales.
    client_body_timeout             10s;
    client_header_timeout           10s;
    client_max_body_size            1M;

    keepalive_requests              1;
    keepalive_timeout               0;

    include                         /etc/nginx/mime.types;

    default_type                    'text/html';

    log_format upstreaminfo '$remote_addr - [$time_local] "$request" "/$market/$http_x_code.$format($accept)" $status "$http_referer" "$http_user_agent" $request_length $request_time';

    access_log /var/log/nginx/access.log upstreaminfo;
    error_log  /var/log/nginx/error.log;

    map $http_host $market {
        hostnames;

        default                    '';
        "~*.?letsdeal.([a-z]{2})$" $1;
    }

    map $http_x_format $format {
        default                    'html';
        "~application/json"        'json';
    }

    map $format $accept {
        default                    'text/html';
        "json"                     'application/json';
    }

    server {
        listen 8080 default_server reuseport;
        root /var/www/html;
        index 000.html;

        location / {
            content_by_lua_block {
                local code = ngx.req.get_headers()["x-code"] or "404"

                local market = ngx.var.market
                local format = ngx.var.format
                local accept = ngx.var.accept

                res = ngx.location.capture("/"..market.."/"..code.."."..format)
                if res.status ~= 200 then
                    altCode = string.sub(code, 1, 1)
                    res = ngx.location.capture("/"..market.."/"..altCode.."xx".."."..format)
                    if res.status ~= 200 then
                        ngx.exit(500)
                    end
                end

                ngx.status = tonumber(code)
                ngx.header.content_type = accept
                ngx.say(res.body)
            }

            sub_filter_types mime-type *;
            sub_filter_once off;
            sub_filter __STATUS__ $http_x_code;
            sub_filter __DOMAIN__ $http_host;
        }

        location ~ "[0-9]{3}\.[a-z]{1,4}$" {
            try_files $uri =404;
        }
        location ~ "([0-9][x]{2})\.[a-z]{1,4}$" {
            try_files $uri /000.$format;
        }

        location /nginx_status {
            allow 127.0.0.1;
            deny all;

            access_log off;
            stub_status on;
        }

        location /healthz {
            access_log off;
            return 200;
        }
    }
}
